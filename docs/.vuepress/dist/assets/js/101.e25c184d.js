(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{463:function(a,t,e){"use strict";e.r(t);var s=e(42),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"内存监控与优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内存监控与优化"}},[a._v("#")]),a._v(" 内存监控与优化")]),a._v(" "),e("p",[a._v("[TOC]")]),a._v(" "),e("h2",{attrs:{id:"一、内存理论基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、内存理论基础"}},[a._v("#")]),a._v(" 一、内存理论基础")]),a._v(" "),e("blockquote",[e("p",[a._v("JVM管理的内存可以总体划分为两部分：Heap Memory和Native Memory。前者我们比较熟悉，是供Java应用程序使用的；后者也称为C-Heap，是供JVM自身进程使用的。Heap Memory及其内部各组成的大小可以通过JVM的一系列命令行参数来控制，在此不赘述。Native Memory没有相应的参数来控制大小，其大小依赖于操作系统进程的最大值（对于32位系统就是3~4G，各种系统的实现并不一样），以及生成的Java字节码大小、创建的线程数量、维持java对象的状态信息大小（用于GC）以及一些第三方的包，比如JDBC驱动使用的native内存。")])]),a._v(" "),e("h3",{attrs:{id:"_1-app内存上限"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-app内存上限"}},[a._v("#")]),a._v(" 1. App内存上限")]),a._v(" "),e("p",[a._v("​\t每个APP都运行在自己的"),e("code",[a._v("VM")]),a._v("上，堆内存分为"),e("code",[a._v("java heapsize")]),a._v("和"),e("code",[a._v("native heapsize")]),a._v("，如果java申请的内存超过最大限制，会报OOM。"),e("strong",[a._v("native层内存申请不受限制，程序员可以一直在native heap上申请空间，当然如果 RAM快耗尽，memory killer会杀进程释放RAM。")])]),a._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 1. 命令 adb shell cat /system/build.prop ")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 2. int memory = activityManager.getMemoryClass();")]),a._v("\ndalvik.vm.heapstartsize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("8m\t   "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 初始堆内存.")]),a._v("\ndalvik.vm.heapgrowthlimit"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("96m  "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 堆内存上限(不准确，默认app都向极限状态靠拢).")]),a._v("\ndalvik.vm.heapsize"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("256m        "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 清单文件设置largeHeap后堆内存上限(不设置也不影响)，极限状态.")]),a._v("\ndalvik.vm.heaptargetutilization"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("0.75")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 理想的堆利用率，超过后会频繁回收.")]),a._v("\ndalvik.vm.heapminfree"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("512k     "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 单次Heap内存调整的最小值.")]),a._v("\ndalvik.vm.heapmaxfree"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("8m       "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 单次Heap内存调整的最大值.")]),a._v("\npersist.sys.dalvik.vm.lib.2"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("libart\ndalvik.vm.isa.x86.variant"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("x86\ndalvik.vm.isa.x86.features"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v("default\ndalvik.vm.lockprof.threshold"),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("500")]),a._v("\n")])])]),e("p",[a._v("​\t经测试一般程序运行内存在极限是256M或512M，在达到她的3/4超出后，gc会频繁回收。")]),a._v(" "),e("p",[a._v("​\t"),e("strong",[a._v("结论：")]),a._v(" app的理想最大内存为 headsize(256或512)*0.75=(192或384)。")])])}),[],!1,null,null,null);t.default=r.exports}}]);