(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{427:function(v,_,e){"use strict";e.r(_);var t=e(42),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h4",{attrs:{id:"架构师介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#架构师介绍"}},[v._v("#")]),v._v(" 架构师介绍")]),v._v(" "),e("p",[v._v("[TOC]")]),v._v(" "),e("h5",{attrs:{id:"_1-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[v._v("#")]),v._v(" 1. 介绍")]),v._v(" "),e("p",[v._v("​\t"),e("a",{attrs:{href:"https://wiki.mbalib.com/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88",target:"_blank",rel:"noopener noreferrer"}},[v._v("软件架构师(Software Architect)"),e("OutboundLink")],1)]),v._v(" "),e("h5",{attrs:{id:"_2-分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-分类"}},[v._v("#")]),v._v(" 2. 分类")]),v._v(" "),e("blockquote",[e("p",[v._v("通常我们说的架构师是"),e("strong",[v._v("系统架构师")]),v._v("和"),e("strong",[v._v("应用架构师")]),v._v("的结合。架构师也可以从开发语言、职责上划分，比如前端架构师、后端架构师、Java架构师、.Net架构师、LAMP架构师等。")])]),v._v(" "),e("ol",[e("li",[e("p",[v._v("系统架构师：服务器负载，可靠性，伸缩，扩展，数据库切分，缓存应用等；")])]),v._v(" "),e("li",[e("p",[v._v("应用架构师：理解业务，梳理模型，设计模式，接口，数据交互等；")])]),v._v(" "),e("li",[e("p",[v._v("业务架构师：也可以叫业务领域专家、行业专家、产品咨询师、资深顾问通常我们说的架构师是1和2的结合。")])])]),v._v(" "),e("h5",{attrs:{id:"_3-常见软件架构分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-常见软件架构分类"}},[v._v("#")]),v._v(" 3. 常见软件架构分类")]),v._v(" "),e("ol",[e("li",[e("p",[v._v("分层架构；")]),v._v(" "),e("p",[v._v("​\t分层架构（layered architecture）是最常见的软件架构，也是事实上的标准架构。如果你不知道要用什么架构，那就用它。")]),v._v(" "),e("p",[v._v("这种架构将软件分成若干个水平层，每一层都有清晰的角色和分工，不需要知道其他层的细节。层与层之间通过接口通信。")]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("表现层（presentation）：用户界面，负责视觉和用户互动")]),v._v(" "),e("li",[v._v("业务层（business）：实现业务逻辑")]),v._v(" "),e("li",[v._v("持久层（persistence）：提供数据，SQL 语句就放在这一层")]),v._v(" "),e("li",[v._v("数据库（database） ：保存数据")])])]),v._v(" "),e("p",[v._v("有的软件在逻辑层和持久层之间，加了一个服务层（service），提供不同业务逻辑需要的一些通用接口。")]),v._v(" "),e("p",[e("strong",[v._v("优点")])]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("结构简单，容易理解和开发")]),v._v(" "),e("li",[v._v("不同技能的程序员可以分工，负责不同的层，天然适合大多数软件公司的组织架构")]),v._v(" "),e("li",[v._v("每一层都可以独立测试，其他层的接口通过模拟解决")])])]),v._v(" "),e("p",[e("strong",[v._v("缺点")])]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("一旦环境变化，需要代码调整或增加功能时，通常比较麻烦和费时")]),v._v(" "),e("li",[v._v("部署比较麻烦，即使只修改一个小地方，往往需要整个软件重新部署，不容易做持续发布")]),v._v(" "),e("li",[v._v("软件升级时，可能需要整个服务暂停")]),v._v(" "),e("li",[v._v("扩展性差。用户请求大量增加时，必须依次扩展每一层，由于每一层内部是耦合的，扩展会很困难")])])])]),v._v(" "),e("li",[e("p",[v._v("事件驱动架构；")]),v._v(" "),e("p",[v._v("​\t事件（event）是状态发生变化时，软件发出的通知。")]),v._v(" "),e("p",[v._v("事件驱动架构（event-driven architecture）就是通过事件进行通信的软件架构。它分成四个部分。")]),v._v(" "),e("p",[e("img",{attrs:{src:"images/arch_event.png",alt:"event"}})]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("事件队列（event queue）：接收事件的入口")]),v._v(" "),e("li",[v._v("分发器（event mediator）：将不同的事件分发到不同的业务逻辑单元")]),v._v(" "),e("li",[v._v("事件通道（event channel）：分发器与处理器之间的联系渠道")]),v._v(" "),e("li",[v._v("事件处理器（event processor）：实现业务逻辑，处理完成后会发出事件，触发下一步操作")])])]),v._v(" "),e("p",[e("strong",[v._v("优点")])]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("分布式的异步架构，事件处理器之间高度解耦，软件的扩展性好")]),v._v(" "),e("li",[v._v("适用性广，各种类型的项目都可以用")]),v._v(" "),e("li",[v._v("性能较好，因为事件的异步本质，软件不易产生堵塞")]),v._v(" "),e("li",[v._v("事件处理器可以独立地加载和卸载，容易部署")])])]),v._v(" "),e("p",[e("strong",[v._v("缺点")])]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("涉及异步编程（要考虑远程通信、失去响应等情况），开发相对复杂")]),v._v(" "),e("li",[v._v("难以支持原子性操作，因为事件通过会涉及多个处理器，很难回滚")]),v._v(" "),e("li",[v._v("分布式和异步特性导致这个架构较难测试")])])])]),v._v(" "),e("li",[e("p",[v._v("微核架构；")]),v._v(" "),e("p",[v._v('​\t微核架构（microkernel architecture）又称为"插件架构"（plug-in architecture），指的是软件的内核相对较小，主要功能和业务逻辑都通过插件实现。')]),v._v(" "),e("p",[v._v("内核（core）通常只包含系统运行的最小功能。插件则是互相独立的，插件之间的通信，应该减少到最低，避免出现互相依赖的问题。")])]),v._v(" "),e("li",[e("p",[v._v("微服务架构；")]),v._v(" "),e("p",[v._v("微服务架构（microservices architecture）是服务导向架构（service-oriented architecture，缩写 SOA）的升级。")]),v._v(" "),e("p",[v._v("每一个服务就是一个独立的部署单元（separately deployed unit）。这些单元都是分布式的，互相解耦，通过远程通信协议（比如REST、SOAP）联系。")])]),v._v(" "),e("li",[e("p",[v._v("云架构。")]),v._v(" "),e("p",[v._v("云结构（cloud architecture）主要解决扩展性和并发的问题，是最容易扩展的架构。")])])]),v._v(" "),e("p",[v._v("它的高扩展性，主要原因是没使用中央数据库，而是把数据都复制到内存中，变成可复制的内存数据单元。然后，业务处理能力封装成一个个处理单元（prcessing unit）。访问量增加，就新建处理单元；访问量减少，就关闭处理单元。由于没有中央数据库，所以扩展性的最大瓶颈消失了。由于每个处理单元的数据都在内存里，最好要进行数据持久化。")]),v._v(" "),e("p",[v._v("这个模式主要分成两部分：处理单元（processing unit）和虚拟中间件（virtualized middleware）。")]),v._v(" "),e("blockquote",[e("ul",[e("li",[v._v("处理单元：实现业务逻辑")]),v._v(" "),e("li",[v._v("虚拟中间件：负责通信、保持sessions、数据复制、分布式处理、处理单元的部署。")])])]),v._v(" "),e("h5",{attrs:{id:"_4-常见方法论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-常见方法论"}},[v._v("#")]),v._v(" 4. 常见方法论")]),v._v(" "),e("ol",[e("li",[v._v("目标：高性能、高可用、高扩展。")]),v._v(" "),e("li",[v._v("SOLID；")]),v._v(" "),e("li",[v._v("GOF(23种设计模式)；")]),v._v(" "),e("li",[v._v("IOC；")]),v._v(" "),e("li",[v._v("AOP；")]),v._v(" "),e("li",[v._v("...")])])])}),[],!1,null,null,null);_.default=i.exports}}]);