(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{451:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_3面试题-架构设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3面试题-架构设计"}},[t._v("#")]),t._v(" 3面试题-架构设计")]),t._v(" "),s("p",[t._v("[TOC]")]),t._v(" "),s("h2",{attrs:{id:"一、谈架构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、谈架构"}},[t._v("#")]),t._v(" 一、谈架构")]),t._v(" "),s("h4",{attrs:{id:"_1-谈谈对移动端架构的理解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-谈谈对移动端架构的理解"}},[t._v("#")]),t._v(" 1. 谈谈对移动端架构的理解？")]),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/Android/06架构与设计/1组件化.html"}},[t._v("1. 组件化")])],1),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/Android/06架构与设计/2插件化.html"}},[t._v("2. 插件化")])],1),t._v(" "),s("p",[s("RouterLink",{attrs:{to:"/Android/06架构与设计/3热修复.html"}},[t._v("3. 热修复")])],1),t._v(" "),s("h4",{attrs:{id:"_2-glide-图片缓存设计-图片滚出屏幕后怎么处理的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-glide-图片缓存设计-图片滚出屏幕后怎么处理的"}},[t._v("#")]),t._v(" 2. Glide 图片缓存设计？图片滚出屏幕后怎么处理的？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("缓存设计")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("活动缓存(弱引用)；")]),t._v(" "),s("p",[t._v("存储正在显示的图片，图片移除屏幕或关闭当前界面图片都会保存到内存缓存。")]),t._v(" "),s("p",[t._v("对资源添加了引用计数器，当屏幕中都不引用资源时，移除到内存缓存。")])]),t._v(" "),s("li",[s("p",[t._v("内存缓存(有最大Size、强引用LruCache&LinkedHashMap);")])]),t._v(" "),s("li",[s("p",[t._v("资源缓存(解码后的图片、LruCache)；")])]),t._v(" "),s("li",[s("p",[t._v("原始缓存(LruCache)；")])])])]),t._v(" "),s("li",[s("p",[t._v("ListView图片滚出屏幕处理？")]),t._v(" "),s("p",[t._v("活动缓存只会存储当前界面上对应item上的图片，item移除屏幕，当ImageView复用时，会先清空它对应的活动缓存的值(移动到内存缓存)，然后再加载新图片到活动缓存(活动缓存会一直保存6个item对应的资源)。")])])]),t._v(" "),s("h4",{attrs:{id:"_3-listview、recycleview-区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-listview、recycleview-区别"}},[t._v("#")]),t._v(" 3.ListView、RecycleView 区别？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("都用适配器设计模式")]),t._v(" "),s("p",[t._v("解耦View和数据源，为View提供统一数据读取方法。")])]),t._v(" "),s("li",[s("p",[t._v("RecycleView 代码设计更精细化、功能化")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LayoutManager")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 负责Item视图布局显示管理(支持多种布局显示)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ItemDecoration")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加分割线")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecyclerView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Adapter")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BadgeGateUsersAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ViewHolder")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RecyclerView"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Recycler")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 负责管理缓存  ")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("缓存设计区别("),s("strong",[t._v("ListView 二级缓存、RecyclerView四级缓存")]),t._v(")")]),t._v(" "),s("p",[s("strong",[t._v("缓存级别设计区别：")])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("scrap:      对应listView的一级缓存(屏幕内显示的)")])]),t._v(" "),s("li",[s("p",[t._v("cached:   对应listView的二级缓存(移除屏幕的)")])])]),t._v(" "),s("p",[t._v("linearlayoutmanager来说cached缓存默认大小为2，起到的作用就是rv滑动时刚被移出屏幕的viewholer的收容所。")]),t._v(" "),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("extension:    三级缓存")]),t._v(" "),s("p",[t._v("第三级缓存，这是一个自定义的缓存，没错rv是可以自定义缓存行为的")])])]),t._v(" "),s("p",[t._v("目前来说这还只是个空实现而已，从这点来看其实rv所说的四级缓存本质上还只是三级缓存。")]),t._v(" "),s("p",[t._v("pool：    四级缓存")]),t._v(" "),s("p",[t._v("pool一般会和cached配合使用，这么来说，cached存不下的会被保存到pool中毕竟cached默认容量大小只有2，但是pool容量       也是有限的当保存满之后再有viewholder到来的话就只能会无情抛弃掉，它也有一个默认的容量大小5.")]),t._v(" "),s("p",[s("strong",[t._v("其他区别：")])]),t._v(" "),s("ol",[s("li",[t._v("ListView缓存的是View，而RV存储的是ViewHolder；")]),t._v(" "),s("li",[t._v("cached如果命中，可以直接复用，无需createVew和bindView(item划出立即划入场景，listview不能立即使用)；")]),t._v(" "),s("li",[t._v("RecycleViewPool可以共用多个相同Adapter的ViewHolder，避免重复销毁和创建(场景：ViewPager+多个RV等)。")])])]),t._v(" "),s("li",[s("p",[t._v("RV支持局部刷新")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rv实现")]),t._v("\nmRvAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("notifyItemChanged")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// listView实现局部刷新(调用getView方法)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//我们通过ListView的getChildAt()来获得需要更新的View，然后通过getTag()获得ViewHolder，从而实现更新。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 更新对应view的内容\n     * @param name\n     * @param position\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" position"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" firstVisiblePosition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirstVisiblePosition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" lastVisiblePosition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getLastVisiblePosition")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//在看见范围内才更新进度条")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" firstVisiblePosition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" position "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" lastVisiblePosition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取指定位置view对象!!!")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("View")]),t._v(" view "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" listview"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getChildAt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("position "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" firstVisiblePosition"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("view"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestListViewAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ViewHolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取指定view对应的ViewHolder!!!")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestListViewAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ViewHolder")]),t._v(" viewHolder "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestListViewAdapter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ViewHolder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" view"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTag")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                viewHolder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setText")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("数据源改变时处理区别")]),t._v(" "),s("p",[t._v("ListView和RecyclerView最大的区别在于数据源改变时的缓存的处理逻辑，ListView是”一锅端”，将所有的mActiveViews都移入了二级缓存mScrapViews("),s("strong",[t._v("都需要重新bindview")]),t._v(")，而RecyclerView则是更加灵活地对每个View修改标志位，"),s("strong",[t._v("区分是否重新bindView")]),t._v("。")])])]),t._v(" "),s("h4",{attrs:{id:"_4-arouter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-arouter"}},[t._v("#")]),t._v(" 4. "),s("RouterLink",{attrs:{to:"/Android/06架构与设计/6Arouter.html"}},[t._v("Arouter")])],1),t._v(" "),s("h4",{attrs:{id:"_5-okhttp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-okhttp"}},[t._v("#")]),t._v(" 5. "),s("RouterLink",{attrs:{to:"/Android/06架构与设计/9Okhttp3.html"}},[t._v("OkHttp")])],1),t._v(" "),s("h4",{attrs:{id:"_6-retrofit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-retrofit"}},[t._v("#")]),t._v(" 6. "),s("RouterLink",{attrs:{to:"/Android/06架构与设计/8Retrofit2.html"}},[t._v("Retrofit")])],1),t._v(" "),s("h2",{attrs:{id:"二、谈设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、谈设计"}},[t._v("#")]),t._v(" 二、谈设计")]),t._v(" "),s("h4",{attrs:{id:"_1-从一个有100w个手机号的文件中-从头匹配手机号搜索设计-1、13、135对应的手机号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-从一个有100w个手机号的文件中-从头匹配手机号搜索设计-1、13、135对应的手机号"}},[t._v("#")]),t._v(" 1. 从一个有100w个手机号的文件中，从头匹配手机号搜索设计(1、13、135对应的手机号)？")]),t._v(" "),s("ol",[s("li",[t._v("100W个手机号加载到内存，大约占10M空间，存储为数组结构；")]),t._v(" "),s("li",[t._v("遍历数组，首位数字为0的存在一个Map中，key为”0“，value为”对应的数组下标“，然后是首位为1到9的同样处理；以此类推，处理第2-11位手机号，共生成10*11=110个Map；")]),t._v(" "),s("li",[t._v("用户输入首位为1，则查找首位对应key为1的Map，得到首位为1的下标数组；用户继续输入3，则查找第二位为3的Map，得到第二位为3的下标数组；找到两个数组的交集，结果为13开头的手机号下标数组。依次查找后序手机号即可。")])]),t._v(" "),s("p",[t._v("空间复杂度为10M，时间复杂度 每位查找基本上递减1/10；")]),t._v(" "),s("h4",{attrs:{id:"_2-响应式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-响应式编程"}},[t._v("#")]),t._v(" 2. 响应式编程")]),t._v(" "),s("ol",[s("li",[s("RouterLink",{attrs:{to:"/Android/06架构与设计/10Rxjava.html"}},[t._v("Rxjava")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/Android/06架构与设计/5Jetpact.html"}},[t._v("Jetpack")])],1),t._v(" "),s("li",[t._v("ReactNative")])]),t._v(" "),s("h4",{attrs:{id:"_3-协程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-协程"}},[t._v("#")]),t._v(" 3. 协程")]),t._v(" "),s("h2",{attrs:{id:"三、面试题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、面试题"}},[t._v("#")]),t._v(" 三、面试题")]),t._v(" "),s("ol",[s("li",[s("RouterLink",{attrs:{to:"/Android/07面试题/AndroidQJava基础.html"}},[t._v("Java基础")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/Android/07面试题/AndroidQ基础.html"}},[t._v("Android基础")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/Android/07面试题/AndroidQ高级.html"}},[t._v("Android高级")])],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);