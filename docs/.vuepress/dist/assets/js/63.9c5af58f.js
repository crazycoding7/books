(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{424:function(t,v,_){"use strict";_.r(v);var s=_(42),a=Object(s.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"aop"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[t._v("#")]),t._v(" AOP")]),t._v(" "),_("p",[t._v("[TOC]")]),t._v(" "),_("h4",{attrs:{id:"_1-介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍"}},[t._v("#")]),t._v(" 1. 介绍")]),t._v(" "),_("p",[t._v("面向切面编程："),_("strong",[t._v("Aspect  Oriented  Programming。")])]),t._v(" "),_("ul",[_("li",[t._v("AOP是一种编程范式，提供从还有一个角度来考虑程序结构以完好面向对象编程（OOP）。")]),t._v(" "),_("li",[t._v("AOP为开发人员提供了一种描写叙述横切关注点的机制，并可以自己主动将横切关注点织入到面向对象的软件系统中。从而实现了横切关注点的模块化。")]),t._v(" "),_("li",[t._v("AOP可以将那些与业务无关，却为业务模块所共同调用的逻辑或责任。比如事务处理、统计、日志管理、权限控制等。封装起来，便于降低系统的反复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。")])]),t._v(" "),_("img",{staticStyle:{zoom:"80%"},attrs:{src:"images/aop_old.jpg"}}),t._v(" "),_("p",[_("img",{attrs:{src:"images/aop_new.jpg",alt:"aop_new"}})]),t._v(" "),_("p",[_("strong",[t._v("切面（Aspect）")]),t._v("：由切点和增强组成，既包含了横切逻辑的定义。也包含了连接点的定义。")]),t._v(" "),_("h4",{attrs:{id:"_2-使用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用"}},[t._v("#")]),t._v(" 2. 使用")]),t._v(" "),_("p",[t._v("Android AOP三剑客：APT、AspectJ、Javassist。")]),t._v(" "),_("p",[t._v("Android AOP就是"),_("strong",[t._v("通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术")]),t._v("。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发效率。")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("APT")]),t._v(" "),_("p",[t._v("代表框架：DataBinding,Dagger2, ButterKnife, EventBus3 、DBFlow、AndroidAnnotation")])]),t._v(" "),_("li",[_("p",[t._v("Javassist")]),t._v(" "),_("p",[t._v("代表框架：热修复框架HotFix 、Savior（InstantRun）等。")]),t._v(" "),_("p",[t._v("Javassist作用是在编译器间修改class文件，与之相似的ASM（热修复框架女娲）也有这个功能，可以让我们直接修改编译后的class二进制代码，首先我们得知道什么时候编译完成，并且我们要赶在class文件被转化为dex文件之前去修改。")])]),t._v(" "),_("li",[_("p",[t._v("AspectJ")]),t._v(" "),_("p",[t._v("代表框架： Hugo(Jake Wharton)。")]),t._v(" "),_("p",[t._v("AspectJ支持编译期和加载时代码注入，在开始之前，我们先看看需要了解的词汇：\n"),_("strong",[t._v("Advice（通知）:")]),t._v(" 典型的 Advice 类型有 before、after 和 around，分别表示在目标方法执行之前、执行后和完全替代目标方法执行的代码。")]),t._v(" "),_("p",[_("strong",[t._v("Joint point（连接点）:")]),t._v(" 程序中可能作为代码注入目标的特定的点和入口。")]),t._v(" "),_("p",[_("strong",[t._v("Pointcut（切入点）:")]),t._v(" 告诉代码注入工具，在何处注入一段特定代码的表达式。")]),t._v(" "),_("p",[_("strong",[t._v("Aspect（切面）:")]),t._v(" Pointcut 和 Advice 的组合看做切面。例如，在本例中通过定义一个 pointcut 和给定恰当的advice，添加一个了内存缓存的切面。")]),t._v(" "),_("p",[_("strong",[t._v("Weaving（织入）:")]),t._v(" 注入代码（advices）到目标位置（joint points）的过程。")])])])])}),[],!1,null,null,null);v.default=a.exports}}]);